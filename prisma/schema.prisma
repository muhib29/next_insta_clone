// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String
  receiverId String
  text       String
  createdAt  DateTime @default(now())
  isRead       Boolean  @default(false)

  sender     Profile  @relation("SentMessages", fields: [senderId], references: [id])
  receiver   Profile  @relation("ReceivedMessages", fields: [receiverId], references: [id])
}



model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        String   // 'like' | 'comment' | 'follow'
  senderId    String   @db.ObjectId
  receiverId  String   @db.ObjectId 
  postId      String?  @db.ObjectId
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  sender      Profile  @relation("SentNotifications", fields: [senderId], references: [id])
  receiver    Profile  @relation("ReceivedNotifications", fields: [receiverId], references: [id])
}

model Profile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  avatar   String?
  username String @unique
  name     String?
  subtitle String?
  bio      String?
  // New relation fields
  followers Follower[] @relation("Followings")
  followings Follower[] @relation("Followers")

  sentMessages     Message[]       @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")

  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  author      String
  description String
  likesCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  likes       Like[]    @relation("PostLikes")
  comments    Comment[] @relation("PostComments")

  media       Media[]   @relation("PostMedia")
}

model Media {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  url     String
  type    String // "image" or "video"
  post    Post    @relation("PostMedia", fields: [postId], references: [id])
  postId  String  @db.ObjectId
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  author    String
  createdAt DateTime @default(now())

  post      Post     @relation("PostLikes", fields: [postId], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  author    String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation("PostComments", fields: [postId], references: [id])
}

model Follower {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  followingProfileEmail String
  followingProfileId    String   @db.ObjectId
  followedProfileId     String   @db.ObjectId
  createdAt             DateTime @default(now())

  // Optional Relations
  followerProfile Profile? @relation("Followers", fields: [followingProfileId], references: [id])
  followedProfile Profile? @relation("Followings", fields: [followedProfileId], references: [id])
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  author    String
  createdAt DateTime @default(now())
}